import cv2

def draw_face_rectangles(image, face_coordinates):
    for (x, y, w, h) in face_coordinates:
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

# Create a VideoCapture object to capture video from the webcam
cap = cv2.VideoCapture(0)

# Load the Haar Cascade Classifier for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

while True:
    ret, frame = cap.read()  # Read a frame from the webcam
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Convert the frame to grayscale
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    cv2.imshow('Face Detection', frame)  # Display the video with detected faces

    if cv2.waitKey(1) & 0xFF == ord('q'):  # Exit the loop when any key is pressed
        break

cap.release()  # Release the video capture resource
cv2.destroyAllWindows()

# Load a different Haar Cascade Classifier for face and eye detection
trained_face_and_eye_data = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_alt2.xml')
img = cv2.imread('anh.jpg')

if img is None:
    print("Không tìm thấy file ảnh")

grayscale = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
face_and_eye_coordinates = trained_face_and_eye_data.detectMultiScale(grayscale)

for (x, y, w, h) in face_and_eye_coordinates:
    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)

width, height = 800, 600
img = cv2.resize(img, (width, height))

cv2.imshow('Face and Eye Detector', img)
cv2.waitKey()
cv2.destroyAllWindows()

print("Code Completed!")
